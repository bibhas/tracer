/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        CFPP-Data-Iterator.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    Iterator class for CF::Data
 */

#include <CF++.hpp>

namespace CF
{
    Data::Iterator::Iterator( void ):
        _cfObject( NULL ),
        _length( 0 ),
        _pos( 0 ),
        _bp( NULL )
    {}
    
    Data::Iterator::Iterator( const Iterator & value ):
        _cfObject( value._cfObject ),
        _length( value._length ),
        _pos( value._pos ),
        _bp( value._bp )
    {
        if( this->_cfObject != NULL )
        {
            CFRetain( this->_cfObject );
        }
    }
    
    Data::Iterator::Iterator( CFDataRef data, CFIndex length, CFIndex pos ):
        _cfObject( data ),
        _length( length ),
        _pos( pos ),
        _bp( NULL )
    {
        if( this->_cfObject != NULL )
        {
            CFRetain( this->_cfObject );
            
            this->_bp = CFDataGetBytePtr( this->_cfObject );
        }
    }
    
    #ifdef CFPP_HAS_CPP11
    Data::Iterator::Iterator( Iterator && value )
    {
        this->_cfObject = value._cfObject;
        value._cfObject = nullptr;
        this->_length   = value._length;
        value._length   = 0;
        this->_pos      = value._pos;
        value._pos      = 0;
        this->_bp       = value._bp;
        value._bp       = nullptr;
    }
    #endif
    
    Data::Iterator::~Iterator( void )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
    }
    
    Data::Iterator & Data::Iterator::operator = ( Iterator value )
    {
        swap( *( this ), value );
        
        return *( this );
    }
    
    Data::Iterator & Data::Iterator::operator ++( void )
    {
        this->_pos++;
        
        return *( this );
    }
    
    Data::Iterator Data::Iterator::operator ++( int )
    {
        Iterator it( *( this ) );
        
        operator++();
        
        return it;
    }
    
    Data::Iterator & Data::Iterator::operator --( void )
    {
        this->_pos--;
        
        return *( this );
    }
    
    Data::Iterator Data::Iterator::operator --( int )
    {
        Iterator it( *( this ) );
        
        operator--();
        
        return it;
    }
    
    Data::Iterator & Data::Iterator::operator += ( CFIndex value )
    {
        this->_pos += value;
        
        return *( this );
    }
    
    Data::Iterator & Data::Iterator::operator -= ( CFIndex value )
    {
        this->_pos -= value;
        
        return *( this );
    }
    
    Data::Iterator Data::Iterator::operator + ( CFIndex value )
    {
        Iterator i;
        
        i = *( this );
        
        return i += value;
    }
    
    Data::Iterator Data::Iterator::operator - ( CFIndex value )
    {
        Iterator i;
        
        i = *( this );
        
        return i -= value;
    }
    
    bool Data::Iterator::operator == ( const Iterator & value ) const
    {
        if( this->_cfObject != value._cfObject )
        {
            return false;
        }
        
        if( this->_length != value._length )
        {
            return false;
        }
        
        if( this->_pos != value._pos )
        {
            return false;
        }
        
        return true;
    }
    
    bool Data::Iterator::operator != ( const Iterator & value ) const
    {
        return !( *( this ) == value );
    }
    
    Data::Byte Data::Iterator::operator * ( void ) const
    {
        if( this->_cfObject == NULL )
        {
            return 0;
        }
        
        if( this->_bp == NULL )
        {
            return 0;
        }
        
        if( this->_pos < 0 )
        {
            return 0;
        }
        
        if( this->_pos >= this->_length )
        {
            return 0;
        }
        
        return this->_bp[ this->_pos ];
    }
    
    Data::Iterator::operator Data::Byte () const
    {
        return operator*();
    }
    
    void swap( Data::Iterator & v1, Data::Iterator & v2 )
    {
        using std::swap;
        
        swap( v1._cfObject, v2._cfObject );
        swap( v1._length,   v2._length );
        swap( v1._pos,      v2._pos );
        swap( v1._bp,       v2._bp );
    }
}
